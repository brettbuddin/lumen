(define (make-drum)
    ; create the units
    (define units
      (table :stretch (unit/slope)
             :stretch-mult (unit/mult)
             :gen (unit/gen)
             :wave (unit/mix)
             :tone-slope (unit/slope)
             :tone-gate (unit/gate)
             :noise-slope (unit/slope)
             :noise-gate (unit/gate)
             :mix (unit/mix (table :size 2))
             :distort (unit/overload)))

    ; route signal paths
    (-> (units :stretch) (table :ratio 0.001))
    (-> (units :stretch-mult) (table :x (<- (units :stretch))))
    (-> (units :gen) (table :freq-mod (<- (units :stretch-mult))))
    (-> (units :wave)
        (list (table :in (<- (units :gen) :sine))
              (table :in (<- (units :gen) :triangle))))
    (-> (units :tone-slope) (table :ratio 0.001))
    (-> (units :noise-slope) (table :ratio 0.001))
    (-> (units :tone-gate)
        (table :in (<- (units :wave))
               :control (<- (units :tone-slope))))
    (-> (units :noise-gate)
        (table :in (<- (units :gen) :noise)
               :control (<- (units :noise-slope))))
    (-> (units :mix) (list (table :in (<- (units :tone-gate)))
                           (table :in (<- (units :noise-gate)))))
    (-> (units :distort) (table :in (<- (units :mix))))

    ; return functions for obtaining the final output and for sparsly setting configuration inputs
    (table :__replace (fn (_) (map (fn (_ u) (unit-unmount u)) units))
           :out (fn () (<- (units :distort)))
           :set (fn (opts)
                    (=> (units :distort) (table :gain (opts :gain)))
                    (=> (units :stretch) (table :trigger (opts :trigger) :rise (opts :stretch-rise) :fall (opts :stretch-fall)))
                    (=> (units :stretch-mult) (table :y (opts :stretch-amount)))
                    (=> (units :gen) (table :freq (opts :pitch) :sync (opts :trigger)))
                    (=> (units :tone-slope) (table :trigger (opts :trigger) :rise (opts :tone-rise) :fall (opts :tone-fall)))
                    (=> (units :tone-gate) (table :cutoff-high (opts :tone-cutoff)))
                    (=> (units :noise-slope) (table :trigger (opts :trigger) :rise (opts :noise-rise) :fall (opts :noise-fall)))
                    (=> (units :noise-gate) (table :cutoff-high (opts :noise-cutoff-high) :cutoff-low (opts :noise-cutoff-low))))))

(define clock (unit/clock))
(define kick (make-drum))
(define gain (unit/mult))

((:set kick)
 (table :gain 1
        :stretch-rise (ms 1)
        :stretch-fall (ms 100)
        :stretch-amount (hz 400)
        :pitch (hz "C2")
        :tone-rise (ms 1)
        :tone-fall (ms 1500)
        :tone-cutoff (hz 4000)
        :noise-rise (ms 1)
        :noise-fall (ms 50)
        :noise-cutoff-high (hz 2500)
        :trigger (<- clock)))

(-> gain (table :x ((:out kick)) :y (db -6)))

(emit (<- gain))
